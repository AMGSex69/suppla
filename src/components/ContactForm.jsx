import React, { useState } from 'react';
import './ContactForm.css';
import RoleSelection from './RoleSelection';
import MultiSelect from './MultiSelect';
import { submitForm, isGoogleScriptReady } from '../config/google';

const ContactForm = () => {
	const [selectedRole, setSelectedRole] = useState(null);
	const [formData, setFormData] = useState({
		role: '',
		name: '',
		phone: '',
		email: '',
		businessType: [],
		companyName: '',
		comment: ''
	});
	const [isSubmitting, setIsSubmitting] = useState(false);
	const [notification, setNotification] = useState(null);

	const handleRoleSelect = (role) => {
		setSelectedRole(role);
		setFormData(prev => ({
			...prev,
			role: role,
			businessType: [], // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–æ–ª–∏
			comment: ''
		}));
	};

	const handleBackToRoleSelection = () => {
		setSelectedRole(null);
		setFormData({
			role: '',
			name: '',
			phone: '',
			email: '',
			businessType: [],
			companyName: '',
			comment: ''
		});
	};

	const handleChange = (e) => {
		let { name, value } = e.target;

		// Format phone number
		if (name === 'phone') {
			value = formatPhoneNumber(value);
		}

		setFormData(prev => ({
			...prev,
			[name]: value
		}));
	};

	const formatPhoneNumber = (value) => {
		let cleaned = value.replace(/\D/g, '');
		if (cleaned.startsWith('8')) {
			cleaned = '7' + cleaned.slice(1);
		}
		if (cleaned.startsWith('7')) {
			cleaned = '+7' + cleaned.slice(1);
		}

		if (cleaned.length >= 2) {
			cleaned = cleaned.replace(/^(\+7)(\d{0,3})(\d{0,3})(\d{0,2})(\d{0,2})/,
				function (match, p1, p2, p3, p4, p5) {
					let result = p1;
					if (p2) result += ' (' + p2;
					if (p3) result += ') ' + p3;
					if (p4) result += '-' + p4;
					if (p5) result += '-' + p5;
					return result;
				});
		}

		return cleaned;
	};

	const validateForm = () => {
		const { role, name, phone, email, businessType } = formData;

		if (!role || !name || !phone || !email || !businessType || businessType.length === 0) {
			showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', 'error');
			return false;
		}

		if (!isValidEmail(email)) {
			showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email', 'error');
			return false;
		}

		if (!isValidPhone(phone)) {
			showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω', 'error');
			return false;
		}

		return true;
	};

	const isValidEmail = (email) => {
		const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
		return emailRegex.test(email);
	};

	const isValidPhone = (phone) => {
		const phoneRegex = /^[\+]?[1-9][\d]{0,15}$/;
		return phoneRegex.test(phone.replace(/[\s\-\(\)]/g, ''));
	};

	const showNotification = (message, type) => {
		setNotification({ message, type });
		setTimeout(() => setNotification(null), 5000);
	};

	const handleSubmit = async (e) => {
		e.preventDefault();

		if (!validateForm()) {
			return;
		}

		setIsSubmitting(true);

		try {
			// –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
			console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', formData);
			console.log('üîç –†–æ–ª—å:', formData.role);
			console.log('üîç –ö–æ–º–ø–∞–Ω–∏—è:', formData.companyName);
			console.log('üîç –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:', formData.comment);

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
			await submitForm(formData);

			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
			showNotification('–°–ø–∞—Å–∏–±–æ! –ú—ã —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å. –ö–∞–∫ —Ç–æ–ª—å–∫–æ —Å–µ—Ä–≤–∏—Å –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω, —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è.', 'success');

			// –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
			setFormData({
				role: selectedRole,
				name: '',
				phone: '',
				email: '',
				businessType: [],
				companyName: '',
				comment: ''
			});

		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏:', error);

			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—à–∏–±–∫–∏
			if (error.message.includes('Google Apps Script –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')) {
				showNotification('–°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é.', 'error');
			} else {
				showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 'error');
			}
		} finally {
			setIsSubmitting(false);
		}
	};

	// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—Ü–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
	const getBusinessTypeOptions = () => {
		if (selectedRole === 'supplier') {
			return [
				{ value: 'construction', label: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã' },
				{ value: 'manufacturing', label: '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å' },
				{ value: 'food', label: '–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è' },
				{ value: 'agriculture', label: '–°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ' },
				{ value: 'textiles', label: '–¢–µ–∫—Å—Ç–∏–ª—å –∏ –æ–¥–µ–∂–¥–∞' },
				{ value: 'electronics', label: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –∏ IT' },
				{ value: 'automotive', label: '–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å' },
				{ value: 'chemicals', label: '–•–∏–º–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å' },
				{ value: 'medical', label: '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ' },
				{ value: 'furniture', label: '–ú–µ–±–µ–ª—å –∏ –∏–Ω—Ç–µ—Ä—å–µ—Ä' },
				{ value: 'packaging', label: '–£–ø–∞–∫–æ–≤–∫–∞ –∏ —Ç–∞—Ä–∞' },
				{ value: 'energy', label: '–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞' },
				{ value: 'logistics', label: '–õ–æ–≥–∏—Å—Ç–∏–∫–∞ –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç' },
				{ value: 'services', label: '–£—Å–ª—É–≥–∏' },
				{ value: 'other', label: '–î—Ä—É–≥–æ–µ' }
			];
		} else {
			return [
				{ value: 'construction', label: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã' },
				{ value: 'manufacturing', label: '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ' },
				{ value: 'food', label: '–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è' },
				{ value: 'agriculture', label: '–°–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è' },
				{ value: 'textiles', label: '–¢–µ–∫—Å—Ç–∏–ª—å –∏ –æ–¥–µ–∂–¥–∞' },
				{ value: 'electronics', label: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –∏ IT —Ç–æ–≤–∞—Ä—ã' },
				{ value: 'automotive', label: '–ê–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏ –∏ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ' },
				{ value: 'chemicals', label: '–•–∏–º–∏—á–µ—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã' },
				{ value: 'medical', label: '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã' },
				{ value: 'furniture', label: '–ú–µ–±–µ–ª—å –∏ –∏–Ω—Ç–µ—Ä—å–µ—Ä' },
				{ value: 'office', label: '–û—Ñ–∏—Å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã' },
				{ value: 'packaging', label: '–£–ø–∞–∫–æ–≤–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã' },
				{ value: 'energy', label: '–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã' },
				{ value: 'raw_materials', label: '–°—ã—Ä—å–µ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã' },
				{ value: 'other', label: '–î—Ä—É–≥–æ–µ' }
			];
		}
	};

	const getCommentPlaceholder = () => {
		if (selectedRole === 'supplier') {
			return '–ß—Ç–æ —Å–∞–º–æ–µ —Å–ª–æ–∂–Ω–æ–µ –≤ –ø–æ–∏—Å–∫–µ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞?';
		} else {
			return '–° –∫–∞–∫–∏–º–∏ –≥–ª–∞–≤–Ω—ã–º–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏ –≤—ã —Å—Ç–∞–ª–∫–∏–≤–∞–µ—Ç–µ—Å—å –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤?';
		}
	};

	const getRoleTitle = () => {
		if (selectedRole === 'supplier') {
			return '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞';
		} else {
			return '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è';
		}
	};

	return (
		<section className="contact-section" id="contact">
			<div className="container">
				{!selectedRole ? (
					<RoleSelection onRoleSelect={handleRoleSelect} />
				) : (
					<div className="contact-content">
						<div className="contact-info">
							<div className="back-button" onClick={handleBackToRoleSelection}>
								<i className="fas fa-arrow-left"></i>
								<span>–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏</span>
							</div>
							<h2>{getRoleTitle()}</h2>
							<p>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è</p>
							<div className="benefits">
								<div className="benefit">
									<i className="fas fa-clock"></i>
									<span>–û—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç</span>
								</div>
								<div className="benefit">
									<i className="fas fa-shield-alt"></i>
									<span>–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä—ã</span>
								</div>
								<div className="benefit">
									<i className="fas fa-percent"></i>
									<span>–í—ã–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è</span>
								</div>
							</div>
						</div>
						<div className="contact-form">
							<form onSubmit={handleSubmit}>
								<div className="form-group">
									<input
										type="text"
										name="name"
										placeholder="–í–∞—à–µ –∏–º—è *"
										value={formData.name}
										onChange={handleChange}
										required
									/>
								</div>
								<div className="form-group">
									<input
										type="tel"
										name="phone"
										placeholder="–¢–µ–ª–µ—Ñ–æ–Ω *"
										value={formData.phone}
										onChange={handleChange}
										required
									/>
								</div>
								<div className="form-group">
									<input
										type="email"
										name="email"
										placeholder="Email *"
										value={formData.email}
										onChange={handleChange}
										required
									/>
								</div>
								<div className="form-group">
									<MultiSelect
										name="businessType"
										value={formData.businessType}
										onChange={handleChange}
										options={getBusinessTypeOptions()}
										placeholder={selectedRole === 'supplier' ? '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥—ã –±–∏–∑–Ω–µ—Å–∞ *' : '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥—ã –ø—Ä–æ–¥—É–∫—Ü–∏–∏ *'}
									/>
								</div>
								<div className="form-group">
									<input
										type="text"
										name="companyName"
										placeholder="–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏"
										value={formData.companyName}
										onChange={handleChange}
									/>
								</div>
								<div className="form-group">
									<textarea
										name="comment"
										placeholder={getCommentPlaceholder()}
										value={formData.comment}
										onChange={handleChange}
										rows="4"
									/>
								</div>
								<button type="submit" className="btn btn-primary" disabled={isSubmitting}>
									{isSubmitting ? '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'}
								</button>
							</form>
						</div>
					</div>
				)}
			</div>

			{notification && (
				<div className={`notification notification-${notification.type}`}>
					<div className="notification-content">
						<i className={`fas fa-${notification.type === 'success' ? 'check-circle' : 'exclamation-circle'}`}></i>
						<span>{notification.message}</span>
						<button className="notification-close" onClick={() => setNotification(null)}>
							<i className="fas fa-times"></i>
						</button>
					</div>
				</div>
			)}
		</section>
	);
};

export default ContactForm; 